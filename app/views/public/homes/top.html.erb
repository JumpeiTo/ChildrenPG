<div class="row">
  <div class="col-lg-4">
    <h1>遊び場検索</h1>
    <%= form_with(url: places_search_path, method: :get, id: 'filter-search_form') do |f| %>
      <div class="form-group">
        <%= f.label :name, '遊び場名、キーワード' %>
        <%= f.text_field :name, placeholder: '例.〇〇公園、動物園、ジェットコースター', class: 'form-control', style: "width: 90%;" %>
      </div>
      <div class="form-group">
        <%= f.label :types, 'カテゴリー' %>
        <%= f.select :types, options_for_select([['どこに遊びに？', nil], ['公園', 'park'], ['動物園', 'zoo'], ['観光名所', 'tourist_attraction'], ['遊園地', 'amusement_park'], ['水族館', 'aquarium'], ['美術館', 'art_gallery'], ['書店', 'book_store'], ['ボウリング場', 'bowling_alley'], ['カフェ', 'cafe'], ['キャンプ場', 'campground'], ['デパート', 'department_store'], ['図書館', 'library'], ['映画館', 'movie_theater'], ['博物館', 'museum'], ['ペットショップ', 'pet_store'], ['学校', 'school'], ['レストラン', 'restaurant'], ['ショッピングモール', 'shopping_mall'], ['スタジアム', 'stadium'], ['店舗', 'store']]), {}, class: 'form-control', style: "width: 60%;" %>
      </div>
      <p class="mb-1" style="font-size: 0.95em;">マップ上を長押でピンを表示させるか、</br>場所を検索することで検索範囲の座標が出せます</p>
      <div class="d-flex form-group mb-1">
        <div for="pin-coordinates-lat">緯度:</div>
        <div id="pin-coordinates-lat" class="ml-1"></div> <!-- ピンの緯度を表示する要素 -->
      </div>
      <div class="d-flex form-group">
        <label for="pin-coordinates-lng">経度:</label>
        <div id="pin-coordinates-lng" class="ml-1"></div> <!-- ピンの経度を表示する要素 -->
      </div>
      <div class="form-group">
        <%= f.label :radius, '検索範囲' %>
        <%= f.select :radius, options_for_select([['どこまで遠くに？', nil], ['1Km','1000'], ['5Km','5000'], ['10Km','10000'], ['30Km','30000']]),{}, class: 'form-control', style: "width: 60%;" %>
      </div>
      <%= f.hidden_field :lat, id: 'lat' %>
      <%= f.hidden_field :lng, id: 'lng' %>
      <%= f.submit '遊び場を検索', id: "submit_button", class: "btn btn-blue px-5 mr-2 mb-2" %>
      <%= button_tag '条件リセット', type: 'button', id: "condition_reset_button", class: "btn btn-sm btn-secondary mb-1" %>
    <% end %>
  </div>
  
  <div class="col-lg-8 mt-lg-0 mt-3">
    <div class="row">
      <div class="input-group col-lg-6 mb-2 mb-lg-3" style="width: 90%;">
        <input id="address" type="text" class="form-control" placeholder="場所を入力してください">
        <button type="button" class="btn btn-outline-blue custom-button" onclick="codeAddress()">探す</button>
      </div>
      <div class="pin-operation col-lg-6">
        <p class="mb-2 mb-lg-0">ピンをドラック＆ドロップで位置の調整が出来ます</p>
      </div>
    </div>
    <!--マップ表示-->
    <div id="map"></div>
    
    <style>
      #map {
        height: 415px;
        width: 100%;
      }
    </style>
    
    <!-- マーカークラスタリング用のスクリプト -->
    <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
    
    <!-- Google マップ表示とマーカー表示のスクリプト -->
    <script>
      let map;
      let marker;
      let geocoder;
      let markersArray = []; // クラスタ表示にする為マーカーを配列で保持するための配列を宣言
      
      /*条件リセット*/
      document.getElementById('condition_reset_button').addEventListener('click', function() {
        document.getElementById('filter-search_form').reset();
        document.getElementById("pin-coordinates-lat").textContent = ""; // ピンの緯度を空にする
        document.getElementById("pin-coordinates-lng").textContent = ""; // ピンの経度を空にする
        document.getElementById("lat").value = ""; // latのhidden fieldを空にする
        document.getElementById("lng").value = ""; // lngのhidden fieldを空にする
        if (marker) {
          marker.setMap(null); // マーカーを地図上から削除する
      }});
      
      function initMap() {
        geocoder = new google.maps.Geocoder();
        
        map = new google.maps.Map(document.getElementById("map"), {
          center: { lat: 35.155396, lng: 136.918969 },　// マップ表示時のデフォルト位置(名古屋の鶴舞公園)
          zoom: 6, // デフォルトズーム倍率
        });
        // 0.6秒長押しでマーカーを生成する
        google.maps.event.addListener(map, "mousedown", function(event) {
          pressTimer = setTimeout(function() {
          if (marker) {
            marker.setMap(null);
          }
          marker = new google.maps.Marker({
            position: event.latLng,
            map: map,
            draggable: true,
          });
          document.getElementById("lat").value = event.latLng.lat();
          document.getElementById("lng").value = event.latLng.lng();
          displayPinCoordinates(event.latLng.lat(), event.latLng.lng()); // ピンの緯度経度を表示
          google.maps.event.addListener(marker, "dragend", function(event) {
            document.getElementById("lat").value = this.getPosition().lat();
            document.getElementById("lng").value = this.getPosition().lng();
            displayPinCoordinates(this.getPosition().lat(), this.getPosition().lng()); // ピンの緯度経度を表示
          });
          }, 600); // 600ミリ秒 (0.6秒) の長押しを検出
        });
        google.maps.event.addListener(map, "mouseup", function(event) {
          clearTimeout(pressTimer); // 長押しのタイマーをクリア
        });
        //遊び場情報をマーカーとして表示
        <% @playgrounds.each do |playground| %>
          (function() { 
            let markerLatLng = { lat: <%= playground.latitude %>, lng: <%= playground.longitude %> };
            let marker = new google.maps.Marker({ 
              position: markerLatLng, 
              map: map,
              icon: {
                url: 'https://maps.google.com/mapfiles/ms/icons/orange-dot.png', // ここでマーカーのアイコンを指定します
                scaledSize: new google.maps.Size(25, 25) // マーカーアイコンのサイズを指定します
              }
            });
            let infowindow = new google.maps.InfoWindow({
              position: markerLatLng,
              content: `<div class='info-window'><a href='<%= playground_path(playground.id) %>' target='_blank'><%= playground.name %></a><br>投稿数 [ <span><%= playground.post.count %></span> ]</div>`
            });
            let isOpen = false; // ウィンドウが開かれているかを示すフラグ
            marker.addListener('click', function() {
              if (isOpen) {
                infowindow.close(); // ウィンドウが開かれていれば閉じる
                isOpen = false; 
              } else {
                infowindow.open(map, marker); // ウィンドウが閉じていれば開く
                isOpen = true; 
              }
            });
            // マーカーを配列に追加
            markersArray.push(marker);
          })();
        <% end %>
        // マーカークラスタリングの設定
        const markerCluster = new MarkerClusterer(map, markersArray, {
          imagePath: "https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m",
          maxZoom: 12, // ズームレベル15以上でクラスタリングが解除されるように設定
        });
      }
      
      function codeAddress() {
        let inputAddress = document.getElementById("address").value;
        geocoder.geocode({ address: inputAddress }, function(results, status) {
          if (status == "OK") {
            if (marker) {
              marker.setMap(null);
            }
            map.setCenter(results[0].geometry.location);
            marker = new google.maps.Marker({
              position: results[0].geometry.location,
              map: map,
              draggable: true,
            });
            document.getElementById("lat").value = results[0].geometry.location.lat();
            document.getElementById("lng").value = results[0].geometry.location.lng();
            displayPinCoordinates(results[0].geometry.location.lat(), results[0].geometry.location.lng()); // ピンの緯度経度を表示
            google.maps.event.addListener(marker, "dragend", function(event) {
              document.getElementById("lat").value = this.getPosition().lat();
              document.getElementById("lng").value = this.getPosition().lng();
              displayPinCoordinates(this.getPosition().lat(), this.getPosition().lng()); // ピンの緯度経度を表示
            });
          } else {
          }
        });
      }

      function displayPinCoordinates(lat, lng) {
        document.getElementById("pin-coordinates-lat").textContent = lat;
        document.getElementById("pin-coordinates-lng").textContent = lng;
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY'] %>&callback=initMap" async defer></script>
  </div>
</div>